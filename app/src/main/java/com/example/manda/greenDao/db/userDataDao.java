package com.example.manda.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.manda.Data.userData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DATA".
*/
public class userDataDao extends AbstractDao<userData, Long> {

    public static final String TABLENAME = "USER_DATA";

    /**
     * Properties of entity userData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "userName", false, "USER_NAME");
        public final static Property UserPwd = new Property(1, String.class, "userPwd", false, "USER_PWD");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property UserId = new Property(3, Long.class, "userId", true, "_id");
        public final static Property LearnTime = new Property(4, int.class, "learnTime", false, "LEARN_TIME");
        public final static Property Wallet = new Property(5, int.class, "wallet", false, "WALLET");
    }


    public userDataDao(DaoConfig config) {
        super(config);
    }
    
    public userDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DATA\" (" + //
                "\"USER_NAME\" TEXT," + // 0: userName
                "\"USER_PWD\" TEXT," + // 1: userPwd
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 3: userId
                "\"LEARN_TIME\" INTEGER NOT NULL ," + // 4: learnTime
                "\"WALLET\" INTEGER NOT NULL );"); // 5: wallet
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, userData entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(2, userPwd);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
        stmt.bindLong(5, entity.getLearnTime());
        stmt.bindLong(6, entity.getWallet());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, userData entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(2, userPwd);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
        stmt.bindLong(5, entity.getLearnTime());
        stmt.bindLong(6, entity.getWallet());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public userData readEntity(Cursor cursor, int offset) {
        userData entity = new userData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userPwd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // userId
            cursor.getInt(offset + 4), // learnTime
            cursor.getInt(offset + 5) // wallet
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, userData entity, int offset) {
        entity.setUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserPwd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLearnTime(cursor.getInt(offset + 4));
        entity.setWallet(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(userData entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(userData entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(userData entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
